-Cracking passwords doesnt need to be strong, even a small % can give admin etc
-Hard password policies tend to lead to issues, bad user tendencies
-Most common way pw's leak is grabbing copy of pw verifier db, then dictionary attack etc

--> For sysadmins DO
-Idea is to try and limit password use but is sometimes impossible
-Or try to not have a pw verifier db, force use of external account etc. works well for eduroam
-can possibly use PAKE if sensible
-2FA

--> For sysadmins DON'T
-dont force traditional pw policies, bad for user eg. cant use last 10 pw's etc
-dont enforce password quality, same reason
-biometrics are scary to use, cannot be changed ever. only 1 fingerprint


-->PVDB Protection
-Sharding reduces the cost of the leak in a PVDB

-->Cryptographic Hashes
-Designed to be fast
(Look up birthday paradox)
-We want f to be 'slow', to slow down attacks. slow as possible without delay
-want it to take up more memory
-hard to parallelise, same reasons

-->Dictionary attacks
-easier if we have a set of (sub)strings that may be part of a pw, gotten from prev cracks. Humans are creatures of habit

-->Rainbow tables
-readup
-prob not gonna be used in assignments


-->SHA-512
-current used hash on linux ($6 is sign
-beaten newly by Argon2, however deployment is limited


-->Paper
-read the paper after the argon and sha notes
-useful for paper at the end
